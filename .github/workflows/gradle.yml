# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

# github repository Actions 페이지에 나타낼 이름
name: CI/CD

# event trigger
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    ## jdk setting
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin' # https://github.com/actions/setup-java
        
    ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: 
        chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build -x test
      shell: bash
      
    ## create application-prod.properties
    - name: create application-prod.properties
      if: contains(github.ref, 'main')
      run: |
          cd ./src/main/resources
          touch ./application-prod.properties
          echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.properties
      shell: bash
    
    ## create firebase-key.json
    - name: create firebase key
      run: |
        cd ./src/main/resources
        ls -a .
        touch ./firebase-service-key.json
        echo "${{ secrets.FIREBASE_KEY }}" > ./firebase-service-key.json
      shell: bash
      
    - name: Build With Gradle
      if: contains(github.ref, 'main')
      run: ./gradlew build -x test
      
    ## docker build & push to production
    - name: Docker build & push to prod
      if: contains(github.ref, 'main')
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/togedutch .
        docker push ${{ secrets.DOCKER_USERNAME }}/togedutch
      
            
    ## deploy to production
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      if: contains(github.ref, 'main')
      with:
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
              sudo docker rm -f $(docker ps -qa)
              sudo docker pull ${{ secrets.DOCKER_USERNAME }}/togedutch
              docker-compose up -d
              docker image prune -f
        
     
